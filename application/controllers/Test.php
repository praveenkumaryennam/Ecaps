
<?php defined('BASEPATH') OR exit('No direct script access allowed');

// require_once APPPATH.'/libraries/Twilio/autoload.php';
// Use Twilio\Rest\Client;

class Test extends CI_Controller {
	function __Construct(){
		parent::__Construct();
		if($this->session->userdata('role') !== 'master'){
			redirect(base_url('/'));
		}
		return;
	}

	function adduser($id)
	{
		$res = $this->db->where('code', $id)->get('employee')->row();
		$arr = [
			'username' => $res->firstname,
			'password' => $res->code,
			'empid' => $res->code,
			'role' => $res->role,
		];
		if($this->db->insert('users', $arr))
		echo 'Created';
		else
		echo 'Error';
	}

	function index(){
		echo get_edit_limit('210700002');
	}

	function get_all_employees(){
		$res = $this->db->select('done_by as employee')->group_by('done_by')->get('process')->result();
			
		$data = [];

		foreach ($res as $e) {
				$data[$e->employee]['log'] = $this->db->select('tryno, out_datetime, department')->where('DATE(out_datetime) BETWEEN "2021-06-01" and "2021-07-02"')->where('done_by', $e->employee)->get('process')->result();
		}

		foreach ($data as $k => $v) {
			$emp_id = $this->db->where('code', $k)->get('employee')->row()->id;
			foreach ($v['log'] as $m) {
				$target_id = $this->db->where('employee_code', $emp_id)->where('year', 2021)->get('employee_target');
				if($target_id->num_rows() > 0){
					$target_id = $target_id->row();
					$c = ($target_id->is_type == 'units')?$this->get_units($m->tryno):1;
					
					if($c > 0){
						$temp = [
							'archived' => $c,
							'target_id' => $target_id->id,
							'emp_code' => $emp_id,
							'datetime' => $m->out_datetime,
						];

						// print_r($temp);
						$this->db->insert('target_archive', $temp);
					}
				}
			}
		}
		echo 'done';
	}


	function get_units($id){
		$a = $this->db->where('modal_no', $id)->get('orders')->row();
		if($a->work_type == 'new'){
			return $a->units;
		}else{
			return 0;
		}
	}


	function update_target_id(){
		$t = $this->db->get('target_archive')->result();
		foreach ($t as $k) {
			$emp = $this->db->select('id, employee_code as code')->where('employee_code', $k->emp_code)->where('year', 2021)->where('status', 0)->get('employee_target')->row();
			$this->db->set('target_id', $emp->id)->where(['YEAR(datetime)' => '2021', 'emp_code' => $emp->code])->update('target_archive');
		}
	}

	function update_target_id_process(){
		$t = $this->db->where('YEAR(pdate)', 2021)->get('process_analyse')->result();

		foreach ($t as $k) {
			$eid = $this->get_emp_id($k->emp_id);
			$emp = $this->db->select('id, employee_code as code')->where('employee_code', $eid)->where('year', 2021)->where('status', 0)->get('employee_target')->row();

			$this->db->set('target_id', $emp->id)->where(['YEAR(pdate)' => '2021', 'emp_id' => $k->emp_id])->update('process_analyse');
		}
	}

	function get_emp_id($code){
		return $this->db->select('id')->where('code', $code)->get('employee')->row()->id;
	}


	function dlt_target(){
		$res = $this->db->select('lab_department, id, code')->get('employee')->result();
		foreach ($res as $k) {
			$t = $this->db->where('employee_code', $k->id)->get('employee_target')->result();
			foreach ($t as $m) {
				if($m->demp != $k->lab_department){
					$this->db->where('employee_code', $k->id)->where('status', 1)->where('year', 2021)->delete('employee_target');
				}	
			}
		}
	}


	function order_value(){
		$ors = ['O20200715983','O202008252502','O202009052971','O202009073029','O202009113292','O202009153502','O202009183648','O202009193676','O202009233869','O202009243909','O202009253932','O202009253964','O202009263984','O202009263986','O202009264004','O202009264025','O202009284059','O202009284077','O202009284079','O202009294106','O202009294119','O202009294121','O202009294153','O202009304176','O202009304197','O202010014209','O202010014227','O202010014229','O202010014230','O202010014231','O202010014233','O202010014234','O202010014238','O202010014239','O202010014240','O202010014245','O202010014246','O202010014248','O202010014250','O202010014251','O202010014252','O202010014256','O202010014258','O202010014260','O202010014270','O202010014274','O202010014275','O202010014280','O202010014281','O202010014286','O202010014293','O202010014295','O202010024309','O202010024314','O202010024315','O202010024320','O202010024322','O202010024329','O202010024330','O202010024332','O202010024333','O202010024334','O202010024337','O202010024342','O202010024343','O202010024352','O202010024362','O202010034365','O202010034372','O202010034397','O202010034399','O202010034403','O202009233852','O202010034407','O202010034414','O202010034416','O202010034418','O202010034419','O202010034434','O202010054460','O202010054465','O202010054471','O202010054475','O202010054477','O202010054494','O202010054495','O202010054499','O202010054502','O202010054506','O202010054524','O202010064538','O202010064552','O202010064559','O202010064582','O202010064583','O202010064586','O202010064587','O202010064588','O202010064591','O202010064596','O202010064598','O202010064601','O202010064602','O202010074613','O202010074620','O202010074626','O202010074637','O202010074653','O202010074664','O202010074676','O202010084720','O202010084766','O202010084779','O202010084800','O202010094803','O202010094806','O202010094810','O202010094831','O202010094847','O202010094871','O202010094878','O202010104888','O202010104895','O202010104915','O202010104916','O202010104944','O202010104950'];

		foreach ($ors as $key => $num) {
			$res = $this->db->select('sum(op.total_amount) as amount, sum(unit) as units')->from('order_products as op')->join('orders as o', 'o.id=op.order_id', 'inner')->where('o.order_number', $num)->get()->row();
			$this->db->set(['units'=> $res->units, 'order_value' => $res->amount])->where('order_number', $num)->update('orders');
		}

	}

	function is_challan(){
		$arr = ['O2020061762','O20200620214','O20200620219','O20200620224','O20200620225','O20200620227','O20200620228','O20200620230','O20200620238','O20200620239','O20200620240','O20200620241','O20200620244','O20200620246','O20200620261','O20200620262','O20200620263','O20200620264','O20200620265','O20200620266','O20200620273','O20200621285','O20200621286','O20200621287','O20200621288','O20200621289','O20200621332','O20200621337','O20200621338','O20200621341','O20200621344','O20200621345','O20200621347','O20200621349','O20200621354','O20200621365','O20200621369','O20200621370','O20200621383','O20200621384','O20200621389','O20200621425','O20200621426','O20200621427','O20200621428','O20200621429','O20200621430','O20200621440','O20200621444','O20200621473','O20200624487','O20200626522','O20200626556','O20200626557','O20200626558','O20200626561','O20200626567','O20200629599','O20200629600','O20200629601','O20200629602','O20200629612','O20200629613','O20200629627','O20200629637','O20200629642','O20200629645','O20200629656','O20200629657','O20200630689','O20200630695','O20200630705','O20200630711','O20200701719','O20200701727','O20200708842','O20200708844','O20200708845','O20200708846'];
		$i = 0;
		foreach ($arr as $key => $value){
			echo $value;
			echo $i++;
			$this->db->set('is_challan', 1)->where('order_number', $value)->update('orders');
		}
	}

  function get_orders(){
    $res = $this->db->select('id')->get('orders')->result();
    $i = 1;
    foreach ($res as $k) {
      $total = $this->db->select('sum(total_amount) as amount')->where('order_id', $k->id)->get('order_products')->row('amount');
      $units = $this->db->select('sum(unit) as units')->where('order_id', $k->id)->get('order_products')->row('units');
      $this->db->set(['order_value' => $total, 'units' => $units])->where('id', $k->id)->update('orders');
      echo $i++.'<br>';
    }
  }

  function backup(){
  	$this->load->dbutil();

	$prefs = array(     
	    'format'      => 'sql',             
	    'filename'    => 'my_db_backup.sql'
	    );


	$backup =& $this->dbutil->backup($prefs); 
	echo 's';
	$db_name = 'backup-on-'. date("Y-m-d-H-i-s") .'.sql';
	$save = '/backup/'.$db_name;

	$this->load->helper('file');
	write_file($save, $backup);
	echo 'e';
  }

  function get_invocie(){
    $res = $this->db->select('invoice_number')->group_by('invoice_number')->get('invoice')->result();
    $i = 1;
    foreach ($res as $k) {
      $total = $this->db->select('paid_amount')->where('invoice_number', $k->invoice_number)->get('payments')->row('paid_amount');
      if($total > 0)
      	$this->db->set('paid', $total)->where('invoice_number', $k->invoice_number)->update('invoice');
      else
      	echo '0<br>';
    }
  }




  function updateclient(){
  	$clients = ['D00001','D00002','D00003','D00004','D00005','D00006','D00007','D00008','D00009','D00010','D00011','D00012','D00013','D00014','D00015','D00016','D00017','D00018','D00019','D00020','D00021','D00022','D00023','D00024','D00025','D00026','D00027','D00028','D00029','D00030','D00031','D00032','D00033','D00034','D00035','D00036','D00037','D00038','D00039','D00040','D00041','D00042','D00043','D00044','D00045','D00046','D00047','D00048','D00049','D00050','D00051','D00052','D00053','D00054','D00055','D00056','D00057','D00058','D00059','D00060','D00061','D00062','D00063','D00064','D00065','D00066','D00067','D00068','D00069','D00070','D00071','D00072','D00073','D00074','D00075','D00076','D00077','D00078','D00079','D00080','D00081','D00082','D00083','D00084','D00085','D00086','D00087','D00088','D00089','D00090','D00091','D00092','D00093','D00094','D00095','D00096','D00097','D00098','D00099','D00100','D00101','D00102','D00103','D00104','D00105','D00106','D00107','D00108','D00109','D00110','D00111','D00112','D00113','D00114','D00115','D00116','D00117','D00118','D00119','D00120','D00121','D00122','D00123','D00124','D00125','D00126','D00127','D00128','D00129','D00130','D00131','D00132','D00133','D00134','D00135','D00136','D00137','D00138','D00139','D00140','D00141','D00142','D00143','D00144','D00145','D00146','D00147','D00148','D00149','D00150','D00151','D00152','D00153','D00154','D00155','D00156','D00157','D00158','D00159','D00160','D00161','D00162','D00163','D00164','D00165','D00166','D00167','D00168','D00169','D00170','D00171','D00172','D00173','D00174','D00175','D00176','D01374','D00178','D00179','D00180','D00181','D00182','D00183','D00184','D00185','D00186','D00187','D00188','D00189','D00190','D00191','D00192','D00193','D00194','D00195','D00196','D00197','D00198','D00199','D00200','D00201','D00202','D00203','D00204','D00205','D00206','D00207','D00208','D00209','D00210','D00211','D00212','D00213','D00214','D00215','D00216','D00217','D00218','D00219','D00220','D00221','D00222','D00223','D00224','D00225','D00226','D00227','D00228','D00229','D00230','D00231','D00232','D00233','D00234','D00235','D00236','D00237','D00238','D00239','D00240','D00241','D00242','D00243','D00244','D00245','D00246','D00247','D00248','D00249','D00250','D00251','D00252','D00253','D00254','D00255','D00256','D00257','D00258','D00259','D00260','D00261','D00262','D00263','D00264','D00265','D00266','D00267','D00268','D00269','D00270','D00271','D00272','D00273','D00274','D00275','D00276','D00277','D00278','D00279','D00280','D00281','D00282','D00283','D00284','D00285','D00286','D00287','D00288','D00289','D00290','D00291','D00292','D00293','D00294','D00295','D00296','D00297','D00298','D00299','D00300','D00301','D00302','D00303','D00304','D00305','D00306','D00307','D00308','D00309','D00310','D00311','D00312','D00313','D00314','D00315','D00316','D00317','D00318','D00319','D00320','D00321','D00322','D00323','D00324','D00325','D00326','D00327','D00328','D00329','D00330','D00331','D00332','D00333','D00334','D00335','D00336','D00337','D00338','D00339','D00340','D00341','D00342','D00343','D00344','D00345','D00346','D00347','D00348','D00349','D00350','D00351','D00352','D00353','D00354','D00355','D00356','D00357','D00358','D00359','D00360','D00361','D00362','D00363','D00364','D00365','D00366','D00367','D00368','D00369','D00370','D00371','D00372','D00373','D00374','D00375','D00376','D00377','D00378','D00379','D00380','D00381','D00382','D00383','D00384','D00385','D00386','D00387','D00388','D00389','D00390','D00391','D00392','D00393','D00394','D00395','D00396','D00397','D00398','D00399','D00400','D00401','D00402','D00403','D00404','D00405','D00406','D00407','D00408','D00409','D00410','D00411','D00412','D00413','D00414','D00415','D00416','D00417','D00418','D00419','D00420','D00421','D00422','D00423','D00424','D00425','D00426','D00427','D00428','D00429','D00430','D00431','D00432','D00433','D00434','D00435','D00436','D00437','D00438','D00439','D00440','D00441','D00442','D00443','D00444','D00445','D00446','D00447','D00448','D00449','D00450','D00451','D00452','D00453','D00454','D00455','D00456','D00457','D00458','D00459','D00460','D00461','D00462','D00463','D00464','D00465','D00466','D00467','D00468','D00469','D00470','D00471','D00472','D00473','D00474','D00475','D00476','D00477','D00478','D00479','D00480','D00481','D00482','D00483','D00484','D00485','D00486','D00487','D00488','D00489','D00490','D00491','D00492','D00493','D00494','D00495','D00496','D00497','D00498','D00499','D00500','D00501','D00502','D00503','D00504','D00505','D00506','D00507','D00508','D00509','D00510','D00511','D00512','D00513','D00514','D00515','D00516','D00517','D00518','D00519','D00520','D00521','D00522','D00523','D00524','D00525','D00526','D00527','D00528','D00529','D00530','D00531','D00532','D00533','D00534','D00535','D00536','D00537','D00538','D00539','D00540','D00541','D00542','D00543','D00544','D00545','D00546','D00547','D00548','D00549','D00550','D00551','D00552','D00553','D00554','D00555','D00556','D00557','D00558','D00559','D00560','D00561','D00562','D00563','D00564','D00565','D00566','D00567','D00568','D00569','D00570','D00571','D00572','D00573','D00574','D00575','D00576','D00577','D00578','D00579','D00580','D00581','D00582','D00583','D00584','D00585','D00586','D00587','D00588','D00589','D00590','D00591','D00592','D00593','D00594','D00595','D00596','D00597','D00598','D00599','D00600','D00601','D00602','D00603','D00604','D00605','D00606','D00607','D00608','D00609','D00610','D00611','D00612','D00613','D00614','D00615','D00616','D00617','D00618','D00619','D00620','D00621','D00622','D00623','D00624','D00625','D00626','D00627','D00628','D00629','D00630','D00631','D00632','D00633','D00634','D00635','D00636','D00637','D00638','D00639','D00640','D00641','D00642','D00643','D00644','D00645','D00646','D00647','D00648','D00649','D00650','D00651','D00652','D00653','D00654','D00655','D00656','D00657','D00658','D00659','D00660','D00661','D00662','D00663','D00664','D00665','D00666','D00667','D00668','D00669','D00670','D00671','D00672','D00673','D00674','D00675','D00676','D00677','D00678','D00679','D00680','D00681','D00682','D00683','D00684','D00685','D00686','D00687','D00688','D00689','D00690','D00691','D00692','D00693','D00694','D00695','D00696','D00697','D00698','D00699','D00700','D00701','D00702','D00703','D00704','D00705','D00706','D00707','D00708','D00709','D00710','D00711','D00712','D00713','D00714','D00715','D00716','D00717','D00718','D00719','D00720','D00721','D00722','D00723','D00724','D00725','D00726','D00727','D00728','D00729','D00730','D00731','D00732','D00733','D00734','D00735','D00736','D00737','D00738','D00739','D00740','D00741','D00742','D00743','D00744','D00745','D00746','D00747','D00748','D00749','D00750','D00751','D00752','D00753','D00754','D00755','D00756','D00757','D00758','D00759','D00760','D00761','D00762','D00763','D00764','D00765','D00766','D00767','D00768','D00769','D00770','D00771','D00772','D00773','D00774','D00775','D00776','D00777','D00778','D00779','D00780','D00781','D00782','D00783','D00784','D00785','D00786','D00787','D00788','D00789','D00790','D00791','D00792','D00793','D00794','D00795','D00796','D00797','D00798','D00799','D00800','D00801','D00802','D00803','D00804','D00805','D00806','D00807','D00808','D00809','D00810','D00811','D00812','D00813','D00814','D00815','D00816','D00817','D00818','D00819','D00820','D00821','D00822','D00823','D00824','D00825','D00826','D00827','D00828','D00829','D00830','D00831','D00832','D00833','D00834','D00835','D00836','D00837','D00838','D00839','D00840','D00841','D00842','D00843','D00844','D00845','D00846','D00847','D00848','D00849','D00850','D00851','D00852','D00853','D00854','D00855','D00856','D00857','D00858','D00859','D00860','D00861','D00862','D00863','D00864','D00865','D00866','D00867','D00868','D00869','D00870','D00871','D00872','D00873','D00874','D00875','D00876','D00877','D00878','D00879','D00880','D00881','D00882','D00883','D00884','D00885','D00886','D00887','D00888','D00889','D00890','D00891','D00892','D00893','D00894','D00895','D00896','D00897','D00898','D00899','D00900','D00901','D00902','D00903','D00904','D00905','D00906','D00907','D00908','D00909','D00910','D00911','D00912','D00913','D00914','D00915','D00916','D00917','D00918','D00919','D00920','D00921','D00922','D00923','D00924','D00925','D00926','D00927','D00928','D00929','D00930','D00931','D00932','D00933','D00934','D00935','D00936','D00937','D00938','D00939','D00940','D00941','D00942','D00943','D00944','D00945','D00946','D00947','D00948','D00949','D00950','D00951','D00952','D00953','D00954','D00955','D00956','D00957','D00958','D00959','D00960','D00961','D00962','D00963','D00964','D00965','D00966','D00967','D00968','D00969','D00970','D00971','D00972','D00973','D00974','D00975','D00976','D00977','D00978','D00979','D00980','D00981','D00982','D00983','D00984','D00985','D00986','D00987','D00988','D00989','D00990','D00991','D00992','D00993','D00994','D00995','D00996','D00997','D00998','D00999','D01000','D01001','D01002','D01003','D01004','D01005','D01006','D01007','D01008','D01009','D01010','D01011','D01012','D01013','D01014','D01015','D01016','D01017','D01018','D01019','D01020','D01021','D01022','D01023','D01024','D01025','D01026','D01027','D01028','D01029','D01030','D01031','D01032','D01033','D01034','D01035','D01036','D01037','D01038','D01039','D01040','D01041','D01042','D01043','D01044','D01045','D01046','D01047','D01048','D01049','D01050','D01051','D01052','D01053','D01054','D01055','D01056','D01057','D01058','D01059','D01060','D01061','D01062','D01063','D01064','D01065','D01066','D01067','D01068','D01069','D01070','D01071','D01072','D01073','D01074','D01075','D01076','D01077','D01078','D01079','D01080','D01081','D01082','D01083','D01084','D01085','D01086','D01087','D01088','D01089','D01090','D01091','D01092','D01093','D01094','D01095','D01096','D01097','D01098','D01099','D01100','D01101','D01102','D01103','D01104','D01105','D01106','D01107','D01108','D01109','D01110','D01111','D01112','D01113','D01114','D01115','D01116','D01117','D01118','D01119','D01120','D01121','D01122','D01123','D01124','D01125','D01126','D01127','D01128','D01129','D01130','D01131','D01132','D01133','D01134','D01135','D01136','D01137','D01138','D01139','D01140','D01141','D01142','D01143','D01144','D01145','D01146','D01147','D01148','D01149','D01150','D01151','D01152','D01153','D01154','D01155','D01156','D01157','D01158','D01159','D01160','D01161','D01162','D01163','D01164','D01165','D01166','D01167','D01168','D01169','D01170','D01171','D01172','D01173','D01174','D01175','D01176','D01177','D01178','D01179','D01180','D01181','D01182','D01183','D01184','D01185','D01186','D01187','D01188','D01189','D01190','D01191','D01192','D01193','D01194','D01195','D01196','D01197','D01198','D01199','D01200','D01201','D01202','D01203','D01204','D01205','D01206','D01207','D01208','D01209','D01210','D01211','D01212','D01213','D01214','D01215','D01216','D01217','D01218','D01219','D01220','D01221','D01222','D01223','D01224','D01225','D01226','D01227','D01228','D01229','D01230','D01231','D01232','D01233','D01234','D01235','D01236','D01237','D01238','D01239','D01240','D01241','D01242','D01243','D01244','D01245','D01246','D01247','D01248','D01249','D01250','D01251','D01252','D01253','D01254','D01255','D01256','D01257','D01258','D01259','D01260','D01261','D01262','D01263','D01264','D01265','D01266','D01267','D01268','D01269','D01270','D01271','D01272','D01273','D01274','D01275','D01276','D01277','D01278','D01279','D01280','D01281','D01282','D01283','D01284','D01285','D01286','D01287','D01288','D01289','D01290','D01291','D01292','D01293','D01294','D01295','D01296','D01297','D01298','D01299','D01300','D01301','D01302','D01303','D01304','D01305','D01306','D01307','D01308','D01309','D01310','D01311','D01312','D01313','D01314','D01315','D01316','D01317','D01318','D01319','D01320','D01321','D01322','D01323','D01324','D01325','D01326','D01327','D01328','D01329','D01330','D01331','D01332','D01333','D01334','D01335','D01336','D01337','D01338','D01339','D01340','D01341','D01342','D01343','D01344','D01345','D01346','D01347','D01348','D01349','D01350','D01351','D01352','D01353','D01354','D01355','D01356','D01357','D01358','D01359','D01360','D01361','D01362','D01363','D01364','D01365','D01366','D01367','D01368','D01369','D01370','D01371','D01372','D01373','D01375','D01376','D01377','D01378','D01379','D01380','D01392','D01414','D01427','D01425','D01426','D01428','D01431','D01386','D01387','D01388','D01389','D01432','D01394','D01393','D01413','D01420','D00339','D01434','D01436','D01437','D01439','D01444','D01445','D01446','D01447'];

  		$html = "<html border=1>";
  		foreach ($clients as $i) {
  			if($this->copyclient($i))
  				$html .= '<tr><td>'.$i.'</td><td>Updated</td></tr>';
  			else
  				$html .= '<tr style="background:  red"><td>'.$i.'</td><td>Not Fount</td></tr>';
  		}
  		echo $html;
  }


  /**
  * Client Data Update
  */
  function copyclient($code){
  	$cd = $this->db->where('code', $code)->get('clients');

  	if($cd->num_rows() > 0){
  		$cd = $cd->row_array();

  		$arr = [
  			'image' => $cd['image'],
			'clientname' => $cd['clientname'],
			'legencycode' => $cd['legencycode'],
			'parent' => $cd['parent'],
			'source' => $cd['source'],
			'referby' => $cd['referby'],
			'customercateory' => $cd['customercateory'],
			'language' => $cd['language'],
			'qualification' => $cd['qualification'],
			'currency' => $cd['currency'],
			'mobile' => $cd['mobile'],
			'whatsappno' => $cd['whatsappno'],
			'landlineno' => $cd['landlineno'],
			'assistantno' => $cd['assistantno'],
			'email' => $cd['email'],
			'dob' => $cd['dob'],
			'anniversarydate' => $cd['anniversarydate'],
			'practicingyear' => $cd['practicingyear'],
			'creditdays' => $cd['creditdays'],
			'country' => $cd['country'],
			'state' => $cd['state'],
			'city' => $cd['city'],
			'area' => $cd['area'],
			'landmark' => $cd['landmark'],
			'pincode' => $cd['pincode'],
			'station' => $cd['station'],
			'address' => $cd['address'],
			'remark1' => $cd['remark1']
  		];

  		$this->sdb = $this->load->database('sdb', TRUE);

  		$this->sdb->set($arr)->where('code', $code)->update('clients');
		return true; 
  	}else{
  		return false;
  	}
  }

  function tableupdate(){
  	$arr = [
  		'country' => 'country',
		'states' => 'states',
		'cities' => 'cities',
		'department' => 'department',
		'designation' => 'designation',
		'labdepartment' => 'labdepartment',
		'location' => 'location',
		'role' => 'role',
		'stations' => 'stations',
		'zones' => 'zones',
		'source' => 'source',
		'qualification' => 'qualification',
		'product' => 'product',
  	];

  	foreach ($arr as $t) {
  		$this->updatemaster_tables($t);
  	}

  }

  function updatemaster_tables($table){
	  	$d = $this->db->get($table);
	  	if($d->num_rows() > 0){
	  		$d = $d->result_array();
	  		$this->sdb = $this->load->database('sdb', TRUE);
	  		$this->sdb->truncate($table);	  		
		  	foreach ($d as $i) {
	  			$this->sdb->insert($table, $i);
		  	}
	  	}
  }

  function emp_code_update(){

 	$arr = [
 			 ['new'=> '00173', 'old'=>'RPD 0111']
 		];

 	foreach ($arr as $k) {
		$this->db->set('added_by', $k['new'])->where('added_by', $k['old'])->update('rpd_edit_invoice');
		$this->db->set('code', $k['new'])->where('code', $k['old'])->update('rpd_employee');
		$this->db->set('added_by', $k['new'])->where('added_by', $k['old'])->update('rpd_invoice');
		
		$this->db->set('added_by', $k['new'])->where('added_by', $k['old'])->update('rpd_labslips');
		$this->db->set('added_by', $k['new'])->where('added_by', $k['old'])->update('rpd_njobcard');
		$this->db->set('added_by', $k['new'])->where('added_by', $k['old'])->update('rpd_orders');
		$this->db->set('updated_by', $k['new'])->where('updated_by', $k['old'])->update('rpd_orders');
		
		$this->db->set('added_by', $k['new'])->where('added_by', $k['old'])->update('rpd_shipments');
		$this->db->set('empid', $k['new'])->where('empid', $k['old'])->update('rpd_users');

 		$this->db->set('done_by', $k['new'])->where('done_by', $k['old'])->update('rpd_process');
 		$this->db->set('given_by', $k['new'])->where('given_by', $k['old'])->update('rpd_process');
 	}

  }

}
